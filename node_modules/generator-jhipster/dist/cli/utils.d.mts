export const CLI_NAME: "jhipster";
export const GENERATOR_NAME: "generator-jhipster";
export const logger: {
    skip: (format?: any, ...param: any[]) => import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
    force: (format?: any, ...param: any[]) => import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
    create: (format?: any, ...param: any[]) => import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
    invoke: (format?: any, ...param: any[]) => import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
    conflict: (format?: any, ...param: any[]) => import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
    identical: (format?: any, ...param: any[]) => import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
    info: (format?: any, ...param: any[]) => import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
    added: (format?: any, ...param: any[]) => import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
    removed: (format?: any, ...param: any[]) => import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
} & {
    (format?: string, parameters?: Record<string, any>): import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
    (message?: any, ...optionalParameters: any[]): import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
    write(format?: any, ...param: any[]): import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
    writeln(format?: any, ...param: any[]): import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
    ok(format?: any, ...param: any[]): import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
    error(format?: any, ...param: any[]): import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
    colored(coloredMessage: import("@yeoman/types").ColoredMessage<import("@yeoman/types").DefaultLoggerCategories>[]): import("@yeoman/types").Logger<import("@yeoman/types").DefaultLoggerCategories>;
} & {
    debugger: any;
    debug(msg: any, ...args: any[]): void;
    warn(this: import("@yeoman/types").Logger, format?: any, ...param: any[]): import("@yeoman/types").Logger;
    verboseInfo(this: import("@yeoman/types").Logger, format?: any, ...param: any[]): import("@yeoman/types").Logger;
    log(this: import("@yeoman/types").Logger, format?: any, ...param: any[]): import("@yeoman/types").Logger;
    error(this: import("@yeoman/adapter").Logger, msg: any, error: any): void;
    fatal(this: any, msg: any, trace: any): never;
} & {
    console: Console;
};
export function getCommand(cmd: any, args?: any[]): string;
export function doneFactory(successMsg: any, sponsorMsg: any): (errorOrMsg: any) => void;
export function printSuccess(): void;
export function done(errorOrMsg: any): void;

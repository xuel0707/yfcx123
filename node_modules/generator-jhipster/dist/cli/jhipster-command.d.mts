export default class JHipsterCommand extends Command {
    configs: {};
    blueprintConfigs: {};
    createCommand(name: any): JHipsterCommand;
    /**
     * Alternative for alias() accepting chaining with undefined value.
     * @param {String} alias
     * @return {JHipsterCommand} this;
     */
    addAlias(alias: string): JHipsterCommand;
    /**
     * Register a callback to be executed before _parseCommand.
     * Used to lazy load options.
     * @param {Function} lazyBuildCommandCallBack
     * @return {JHipsterCommand} this;
     */
    lazyBuildCommand(lazyBuildCommandCallBack: Function): JHipsterCommand;
    _lazyBuildCommandCallBack: Function | undefined;
    /**
     * Register callback to customize _excessArguments behavior.
     * @param {Function} excessArgumentsCallback
     * @return {JHipsterCommand} this;
     */
    excessArgumentsCallback(excessArgumentsCallback: Function): JHipsterCommand;
    _excessArgumentsCallback: Function | undefined;
    /**
     * @private
     * Override _excessArguments to customize behavior.
     */
    private _excessArguments;
    /**
     * @private
     * Override _parseCommand to execute a callback before parsing.
     */
    private _parseCommand;
    /**
     * Override addOption to register a negative alternative for every option.
     * @param {Option} option
     * @return {JHipsterCommand} this;
     */
    addOption(option: Option): JHipsterCommand;
    /**
     * Register arguments using cli/commands.js structure.
     * @param {String[]} args
     * @return {JHipsterCommand} this;
     */
    addCommandArguments(args: string[]): JHipsterCommand;
    /**
     * Register options using cli/commands.js structure.
     * @param {object[]} [opts]
     * @return {JHipsterCommand} this;
     */
    addCommandOptions(opts?: any[] | undefined): JHipsterCommand;
    _addCommandOption(opt: any): JHipsterCommand;
    /**
     * Register arguments using generator._arguments structure.
     * @param {object[]} generatorArgs
     * @return {JHipsterCommand} this;
     */
    addGeneratorArguments(generatorArgs?: object[]): JHipsterCommand;
    /**
     * Register options using generator._options structure.
     * @param {object} options
     * @param {string} blueprintOptionDescription - description of the blueprint that adds the option
     * @return {JHipsterCommand} this;
     */
    addGeneratorOptions(options: object, blueprintOptionDescription: string): JHipsterCommand;
    addJHipsterArguments(jhipsterArguments: any): this;
    addJHipsterOptions(options: any, blueprintOptionDescription: any): this;
    addJHipsterConfigs(configs: {} | undefined, blueprintOptionDescription: any): this;
    _addGeneratorOption(optionName: any, optionDefinition: any, additionalDescription?: string): any;
}
import { Command } from 'commander';
import { Option } from 'commander';

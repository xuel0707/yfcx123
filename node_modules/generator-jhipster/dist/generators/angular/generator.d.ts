import BaseApplicationGenerator from '../base-application/index.js';
import type { PostWritingEntitiesTaskParam } from '../../lib/types/application/tasks.js';
export default class AngularGenerator extends BaseApplicationGenerator {
    localEntities?: any[];
    beforeQueue(): Promise<void>;
    get loading(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").TaskParamWithApplicationDefaults<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "loadPackageJson" | "applicationDefauts">;
    get preparing(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PreparingTaskParam<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "applicationDefauts" | "addNeedles">;
    get preparingEachEntity(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PreparingEachEntityTaskParam<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "prepareEntity">;
    get preparingEachEntityField(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PreparingEachEntityFieldTaskParam<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "prepareField">;
    get default(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").TaskParamWithEntities<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "loadEntities" | "queueTranslateTransform">;
    get writing(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").WritingTaskParam<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "cleanup" | "cleanupOldFilesTask" | "writeEslintClientRootConfigFile" | "writeFiles">;
    get writingEntities(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").TaskParamWithEntities<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "cleanupEntitiesFiles" | "writeEntitiesFiles">;
    get postWriting(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").PostWritingTaskParam<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "addWebsocketDependencies">;
    get postWritingEntities(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, PostWritingEntitiesTaskParam<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "postWriteEntitiesFiles">;
    get end(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/application/tasks.js").TaskParamWithApplication<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>, "end">;
    /**
     * @private
     * Add new scss style to the angular application in "vendor.scss".
     *
     * @param {string} style - scss to add in the file
     * @param {string} comment - comment to add before css code
     *
     * example:
     *
     * style = '.success {\n     @extend .message;\n    border-color: green;\n}'
     * comment = 'Message'
     *
     * * ==========================================================================
     * Message
     * ========================================================================== *
     * .success {
     *     @extend .message;
     *     border-color: green;
     * }
     *
     */
    addVendorSCSSStyle(style: any, comment?: any): void;
    /**
     * @private
     * Add a new lazy loaded module to admin routing file.
     *
     * @param {string} route - The route for the module. For example 'entity-audit'.
     * @param {string} modulePath - The path to the module file. For example './entity-audit/entity-audit.module'.
     * @param {string} moduleName - The name of the module. For example 'EntityAuditModule'.
     * @param {string} pageTitle - The translation key if i18n is enabled or the text if i18n is disabled for the page title in the browser.
     *                             For example 'entityAudit.home.title' for i18n enabled or 'Entity audit' for i18n disabled.
     *                             If undefined then application global page title is used in the browser title bar.
     */
    addAdminRoute(route: any, modulePath: any, moduleName: any, pageTitle: any): void;
    /**
     * @private
     * Add a new module in the TS modules file.
     *
     * @param {string} appName - Angular2 application name.
     * @param {string} angularName - The name of the new admin item.
     * @param {string} folderName - The name of the folder.
     * @param {string} fileName - The name of the file.
     * @param {boolean} enableTranslation - If translations are enabled or not.
     * @param {string} clientFramework - The name of the client framework.
     */
    addAngularModule(appName: any, angularName: any, folderName: any, fileName: any, enableTranslation: any): void;
    /**
     * @private
     * Add a new icon to icon imports.
     *
     * @param {string} iconName - The name of the Font Awesome icon.
     */
    addIcon(iconName: any): void;
    /**
     * Add a new menu element to the admin menu.
     *
     * @param {string} routerName - The name of the Angular router that is added to the admin menu.
     * @param {string} iconName - The name of the Font Awesome icon that will be displayed.
     * @param {boolean} enableTranslation - If translations are enabled or not
     * @param {string} translationKeyMenu - i18n key for entry in the admin menu
     */
    addElementToAdminMenu(routerName: any, iconName: any, enableTranslation: any, translationKeyMenu?: string, jhiPrefix?: any): void;
    addEntitiesToMenu({ application, entities }: Pick<PostWritingEntitiesTaskParam, 'application' | 'entities'>): void;
    addEntitiesToModule(param: Pick<PostWritingEntitiesTaskParam, 'application' | 'entities'>): void;
    /**
     * @private
     * Add new scss style to the angular application in "global.scss
     *
     * @param {string} style - css to add in the file
     * @param {string} comment - comment to add before css code
     *
     * example:
     *
     * style = '.jhipster {\n     color: #baa186;\n}'
     * comment = 'New JHipster color'
     *
     * * ==========================================================================
     * New JHipster color
     * ========================================================================== *
     * .jhipster {
     *     color: #baa186;
     * }
     *
     */
    addMainSCSSStyle(style: any, comment?: any): void;
    /**
     * Returns the typescript import section of enums referenced by all fields of the entity.
     * @param fields returns the import of enums that are referenced by the fields
     * @returns {typeImports:Map} the fields that potentially contains some enum types
     */
    generateEntityClientEnumImports(fields: any): Map<any, any>;
    /**
     * Get the typescript type of a non-composite primary key
     * @param primaryKey the primary key of the entity
     * @returns {string} the typescript type.
     */
    getTypescriptKeyType(primaryKey: any): "string" | "number";
    /**
     * generates a value for a primary key type
     * @param primaryKey the primary key attribute (or its type) of the entity
     * @param index an index to add salt to the value
     * @param wrapped if the value should be within quotes
     * @returns {string|number|string}
     */
    generateTestEntityId(primaryKey: any, index?: number, wrapped?: boolean): any;
    /**
     * @private
     * Generate a test entity, for the PK references (when the PK is a composite, derived key)
     *
     * @param {any} primaryKey - primary key definition.
     * @param {number} [index] - index of the primary key sample, pass undefined for a random key.
     */
    generateTestEntityPrimaryKey(primaryKey: any, index: any): string;
    /**
     * @private
     * Generate a test entity instance with faked values.
     *
     * @param {any} references - references to other entities.
     * @param {any} additionalFields - additional fields to add to the entity or with default values that overrides generated values.
     */
    generateTypescriptTestEntity(references: any, additionalFields: any): string;
    /**
     * @private
     * Create a angular form path getter method of reference.
     *
     * @param {object} reference
     * @param {string[]} prefix
     * @return {string}
     */
    buildAngularFormPath(reference: any, prefix?: never[]): string;
    /**
     * @private
     * Add a new menu element, at the root of the menu.
     *
     * @param {string} routerName - The name of the router that is added to the menu.
     * @param {string} iconName - The name of the Font Awesome icon that will be displayed.
     * @param {boolean} enableTranslation - If translations are enabled or not
     * @param {string} clientFramework - The name of the client framework
     * @param {string} translationKeyMenu - i18n key for entry in the menu
     */
    addElementToMenu(routerName: any, iconName: any, enableTranslation: any, _clientFramework?: any, translationKeyMenu?: string): void;
}

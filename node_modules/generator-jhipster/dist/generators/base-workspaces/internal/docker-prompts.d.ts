/**
 * Copyright 2013-2024 the original author or authors from the JHipster project.
 *
 * This file is part of the JHipster project, see https://www.jhipster.tech/
 * for more information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { loadConfigs } from './docker-base.js';
declare const _default: {
    askForApplicationType: typeof askForApplicationType;
    askForGatewayType: typeof askForGatewayType;
    askForPath: typeof askForPath;
    askForApps: typeof askForApps;
    askForClustersMode: typeof askForClustersMode;
    askForMonitoring: typeof askForMonitoring;
    askForServiceDiscovery: typeof askForServiceDiscovery;
    askForAdminPassword: typeof askForAdminPassword;
    askForDockerRepositoryName: typeof askForDockerRepositoryName;
    askForDockerPushCommand: typeof askForDockerPushCommand;
    loadConfigs: typeof loadConfigs;
};
export default _default;
/**
 * Ask For Application Type
 */
declare function askForApplicationType(): Promise<void>;
/**
 * Ask For Gateway Type
 */
declare function askForGatewayType(): Promise<void>;
/**
 * Ask For Path
 */
declare function askForPath(): Promise<void>;
/**
 * Ask For Apps
 */
declare function askForApps(): Promise<void>;
/**
 * Ask For Clusters Mode
 */
declare function askForClustersMode(): Promise<void>;
/**
 * Ask For Monitoring
 */
declare function askForMonitoring(): Promise<void>;
/**
 * Ask For Service Discovery
 */
declare function askForServiceDiscovery(): Promise<void>;
/**
 * Ask For Admin Password
 */
declare function askForAdminPassword(): Promise<void>;
/**
 * Ask For Docker Repository Name
 */
declare function askForDockerRepositoryName(): Promise<void>;
/**
 * Ask For Docker Push Command
 */
declare function askForDockerPushCommand(): Promise<void>;
/**
 * Get App Folders
 * @param input path to join to destination path
 * @param deploymentApplicationType type of application being composed
 * @returns {Array} array of string representing app folders
 */
export declare function getAppFolders(directory: any, deploymentApplicationType: any): never[];

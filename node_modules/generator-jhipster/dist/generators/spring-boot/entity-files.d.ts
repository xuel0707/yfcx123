/**
 * Copyright 2013-2024 the original author or authors from the JHipster project.
 *
 * This file is part of the JHipster project, see https://www.jhipster.tech/
 * for more information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import fs from 'fs';
import * as _ from 'lodash-es';
export declare const restFiles: {
    restFiles: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
        condition: (generator: any) => any;
    }[];
    restTestFiles: {
        condition: (generator: any) => any;
        path: string;
        templates: {
            file: string;
            options: {
                context: {
                    _: typeof _;
                    chalkRed: import("chalk").ChalkInstance;
                    fs: typeof fs;
                    SERVER_TEST_SRC_DIR: string;
                };
            };
            renameTo: (generator: any) => string;
        }[];
    }[];
};
export declare const filteringFiles: {
    filteringFiles: import("../base/api.js").WriteFileBlock[];
};
export declare const serviceFiles: {
    serviceFiles: import("../base/api.js").WriteFileBlock[];
};
export declare const dtoFiles: {
    baseDtoFiles: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
        condition: (generator: any) => boolean;
    }[];
    dtoFiles: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
        condition: (generator: any) => boolean;
    }[];
    dtoTestFiles: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
        condition: (generator: any) => boolean;
    }[];
};
export declare const serverFiles: {
    baseDtoFiles: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
        condition: (generator: any) => boolean;
    }[];
    dtoFiles: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
        condition: (generator: any) => boolean;
    }[];
    dtoTestFiles: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
        condition: (generator: any) => boolean;
    }[];
    serviceFiles: import("../base/api.js").WriteFileBlock[];
    filteringReactiveFiles: {
        renameTo: (data: any, file: any) => string;
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        condition: (generator: any) => any;
    }[];
    filteringFiles: import("../base/api.js").WriteFileBlock[];
    restFiles: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
        condition: (generator: any) => any;
    }[];
    restTestFiles: {
        condition: (generator: any) => any;
        path: string;
        templates: {
            file: string;
            options: {
                context: {
                    _: typeof _;
                    chalkRed: import("chalk").ChalkInstance;
                    fs: typeof fs;
                    SERVER_TEST_SRC_DIR: string;
                };
            };
            renameTo: (generator: any) => string;
        }[];
    }[];
};
export declare function writeFiles(): {
    cleanupOldServerFiles: (this: import("../index.js").GeneratorBaseCore, params: import("../../lib/types/application/tasks.js").TaskParamWithEntities<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>) => void;
    writeServerFiles: (this: import("../index.js").GeneratorBaseCore, params: import("../../lib/types/application/tasks.js").TaskParamWithEntities<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>) => void;
};

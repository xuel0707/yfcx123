/**
 * The default is to use a file path string. It implies use of the template method.
 * For any other config an object { file:.., method:.., template:.. } can be used
 */
export declare const baseServerFiles: {
    readme: {
        templates: string[];
    }[];
    packageJson: {
        condition: (generator: any) => any;
        templates: string[];
    }[];
    serverBuild: ({
        templates: string[];
        condition?: undefined;
    } | {
        condition: (generator: any) => any;
        templates: string[];
    })[];
    serverResource: ({
        path: string;
        renameTo: (data: any, filePath: string) => string;
        transform: boolean;
        templates: ((data: any) => string)[];
    } | {
        path: string;
        templates: string[];
        renameTo?: undefined;
        transform?: undefined;
    })[];
    serverJavaAuthConfig: ({
        condition: (generator: any) => any;
        path: string;
        renameTo: (data: any, filePath: string) => string;
        templates: string[];
    } | {
        path: string;
        renameTo: (data: any, filePath: string) => string;
        templates: string[];
        condition?: undefined;
    } | {
        path: string;
        renameTo: (data: any, filePath: string) => string;
        templates: ((data: any) => string)[];
        condition?: undefined;
    })[];
    serverMicroservice: (import("../base/api.js").WriteFileBlock | {
        condition: (generator: any) => any;
        path: string;
        templates: {
            file: string;
            renameTo: () => string;
        }[];
    })[];
    serviceDiscovery: ({
        condition: (generator: any) => any;
        path: string;
        templates: string[];
        renameTo?: undefined;
    } | {
        condition: (generator: any) => any;
        path: string;
        renameTo: (data: any, filePath: string) => string;
        templates: string[];
    })[];
    serverJavaApp: {
        path: string;
        renameTo: (data: any, filePath: string) => string;
        templates: string[];
    }[];
    serverJavaConfig: {
        path: string;
        renameTo: (data: any, filePath: string) => string;
        templates: string[];
    }[];
    serverJavaDomain: {
        condition: (ctx: any) => any;
        path: string;
        renameTo: (data: any, filePath: string) => string;
        templates: string[];
    }[];
    serverJavaWebError: {
        path: string;
        renameTo: (data: any, filePath: string) => string;
        templates: string[];
    }[];
    serverJavaWeb: ({
        condition: (generator: any) => any;
        path: string;
        renameTo: (data: any, filePath: string) => string;
        templates: string[];
    } | {
        condition: (generator: any) => any;
        path: string;
        renameTo: (data: any, filePath: string) => string;
        templates: ((data: any) => string)[];
    })[];
    serverTestFw: ({
        path: string;
        renameTo: (data: any, filePath: string) => string;
        templates: string[];
    } | {
        path: string;
        renameTo: (data: any, filePath: string) => string;
        templates: ((data: any) => string)[];
    } | {
        path: string;
        templates: string[];
        renameTo?: undefined;
    })[];
    serverJavaUserManagement: ({
        condition: (generator: any) => any;
        path: string;
        renameTo: (data: any, filePath: string) => string;
        templates: string[];
    } | {
        path: string;
        renameTo: (data: any, filePath: string) => string;
        templates: string[];
        condition?: undefined;
    })[];
};
export declare const serverFiles: {};

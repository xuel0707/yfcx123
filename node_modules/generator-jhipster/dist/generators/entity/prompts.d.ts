import type EntityGenerator from './generator.js';
declare const prompts: {
    askForMicroserviceJson: typeof askForMicroserviceJson;
    askForUpdate: typeof askForUpdate;
    askForFields: typeof askForFields;
    askForFieldsToRemove: typeof askForFieldsToRemove;
    askForRelationships: typeof askForRelationships;
    askForRelationsToRemove: typeof askForRelationsToRemove;
    askForDTO: typeof askForDTO;
    askForService: typeof askForService;
    askForFiltering: typeof askForFiltering;
    askForReadOnly: typeof askForReadOnly;
    askForPagination: typeof askForPagination;
};
export default prompts;
declare function askForMicroserviceJson(this: EntityGenerator): Promise<void> | undefined;
declare function askForUpdate(this: EntityGenerator): Promise<void> | undefined;
declare function askForFields(): Promise<void> | undefined;
declare function askForFieldsToRemove(): any;
declare function askForRelationships(this: EntityGenerator, ...args: any[]): Promise<void> | undefined;
declare function askForRelationsToRemove(this: EntityGenerator): Promise<void> | undefined;
declare function askForFiltering(this: EntityGenerator): Promise<void> | undefined;
declare function askForReadOnly(this: EntityGenerator): Promise<void> | undefined;
declare function askForDTO(this: EntityGenerator): Promise<void> | undefined;
declare function askForService(this: EntityGenerator): Promise<void> | undefined;
declare function askForPagination(this: EntityGenerator): Promise<void> | undefined;

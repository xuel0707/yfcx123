export declare const sqlFiles: {
    serverFiles: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
    }[];
    reactiveJavaUserManagement: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
        condition: (generator: any) => any;
    }[];
    reactiveCommon: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
        condition: (generator: any) => any;
    }[];
    hibernate: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
        condition: (generator: any) => boolean;
    }[];
    testContainers: ({
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
    } | {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
        condition: (generator: any) => boolean;
    })[];
};
export declare const h2Files: {
    serverResource: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
    }[];
};
export declare const mysqlFiles: {
    serverTestSources: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
    }[];
};
export declare const mariadbFiles: {
    serverTestSources: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
    }[];
};
export declare const mssqlFiles: {
    serverTestSources: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
    }[];
};
export declare const postgresFiles: {
    serverTestSources: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
    }[];
};
export declare const serverFiles: {};
declare const _default: (this: import("../index.js").GeneratorBaseCore, params: import("../../lib/types/application/tasks.js").WritingTaskParam<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>) => void;
export default _default;

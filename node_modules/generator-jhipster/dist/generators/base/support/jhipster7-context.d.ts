import { hibernateSnakeCase } from '../../server/support/index.js';
import { getJdbcUrl, getR2dbcUrl } from '../../spring-data-relational/support/database-url.js';
import { upperFirstCamelCase } from '../../../lib/utils/string.js';
export declare const jhipster7deprecatedProperties: {
    devDatabaseType: {
        behaviorOnlyReason: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    prodDatabaseType: {
        behaviorOnlyReason: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    GRADLE_VERSION: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    NODE_VERSION: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    NPM_VERSION: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    JHIPSTER_DEPENDENCIES_VERSION: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    JAVA_VERSION: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    JAVA_COMPATIBLE_VERSIONS: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    SPRING_BOOT_VERSION: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    DOCKER_DIR: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    CLIENT_MAIN_SRC_DIR: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    CLIENT_TEST_SRC_DIR: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    CLIENT_DIST_DIR: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    BUILD_DIR: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    MAIN_SRC_DIR: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    DIST_DIR: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    userPrimaryKeyTypeString: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    userPrimaryKeyTypeUUID: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    _getClientTranslation: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    _getEntityClientTranslation: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    testsNeedCsrf: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    haveFieldWithJavadoc: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    fieldsContainBigDecimal: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    fieldsContainBlob: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    fieldsContainDate: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    fieldsContainDuration: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    fieldsContainInstant: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    fieldsContainLocalDate: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    fieldsContainTimed: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    fieldsContainUUID: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    fieldsContainZonedDateTime: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    fieldsContainImageBlob: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    fieldsContainTextBlob: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    fieldsContainBlobOrImage: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    validation: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    dependabotPackageJson: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => {
            dependencies: any;
            devDependencies: any;
        };
    };
    cacheManagerIsAvailable: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    enableLiquibase: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    databaseTypePostgres: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    prodDatabaseTypePostgres: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    databaseTypeMariadb: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    databaseTypeMysql: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    databaseTypeOracle: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    databaseTypeMssql: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    cacheProviderEhCache: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    getJDBCUrl: {
        replacement: string;
        get: () => typeof getJdbcUrl;
    };
    getR2DBCUrl: {
        replacement: string;
        get: () => typeof getR2dbcUrl;
    };
    getDBCExtraOption: {
        replacement: string;
        get: () => (databaseType: any) => string;
    };
    getPrimaryKeyValue: {
        replacement: string;
        get: () => (primaryKey: any, databaseType: any, defaultValue?: number) => string;
    };
    getJoinTableName: {
        replacement: string;
        get: () => (...args: any[]) => string;
    };
    getJavaValueGeneratorForType: {
        replacement: string;
        get: () => (type: any) => string;
    };
    asEntity: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => (name: any) => string;
    };
    asDto: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => (name: any) => string;
    };
    upperFirstCamelCase: {
        replacement: string;
        get: () => typeof upperFirstCamelCase;
    };
    hasOauthUser: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => any;
    };
    getPrettierExtensions: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => () => any;
    };
    _generateSqlSafeName: {
        replacement: string;
        get: () => (name: any) => any;
    };
    isFilterableType: {
        replacement: string;
        get: () => (fieldType: any) => boolean;
    };
    getSpecificationBuilder: {
        replacement: string;
        get: () => (fieldType: import("../../../lib/application/field-types.js").FieldType) => "buildRangeSpecification" | "buildStringSpecification" | "buildSpecification";
    };
    getColumnName: {
        replacement: string;
        get: () => typeof hibernateSnakeCase;
    };
    isUsingBuiltInUser: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => () => any;
    };
    isUsingBuiltInAuthority: {
        replacement: string;
        get: ({ data }: {
            data: any;
        }) => () => any;
    };
    jhipsterConfig: {
        replacement: string;
        get: ({ generator }: {
            generator: any;
        }) => any;
    };
    configOptions: {
        replacement: string;
        get: () => {};
    };
};
export declare function createJHipster7Context(generator: any, data: any, options: {
    log: (msg: string) => void;
}): any;

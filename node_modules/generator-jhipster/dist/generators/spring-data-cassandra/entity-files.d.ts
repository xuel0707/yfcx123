export declare const entityFiles: {
    dbChangelog: {
        condition: (ctx: any) => boolean;
        path: string;
        templates: {
            file: string;
            renameTo: (ctx: any) => string;
        }[];
    }[];
    domainFiles: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
        condition: (ctx: any) => any;
    }[];
    repositoryFiles: {
        templates: string[];
        path?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>) => string) | undefined;
        renameTo?: string | ((this: import("../index.js").GeneratorBaseCore, data: import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>, filePath: string) => string) | undefined;
        condition: (ctx: any) => any;
    }[];
};
export declare function cleanupCassandraEntityFilesTask(): void;
declare const _default: (this: import("../index.js").GeneratorBaseCore, params: import("../../lib/types/application/tasks.js").TaskParamWithEntities<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>) => void;
export default _default;

/**
 * Copyright 2013-2024 the original author or authors from the JHipster project.
 *
 * This file is part of the JHipster project, see https://www.jhipster.tech/
 * for more information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import chalk from 'chalk';
import { createNeedleCallback } from './base/support/needles.js';
export default class {
    generator;
    constructor(generator) {
        this.generator = generator;
    }
    /**
     * @deprecated
     */
    get clientSrcDir() {
        return this.generator.sharedData.getApplication().clientSrcDir;
    }
    /**
     * @deprecated
     */
    get clientFramework() {
        return this.generator.sharedData.getApplication().clientFramework;
    }
    /**
     * @deprecated use editFile
     * @param rewriteFileModel
     * @param errorMessage
     */
    addBlockContentToFile(rewriteFileModel, errorMessage) {
        const ignoreNonExisting = errorMessage ?? true;
        const { path: rewritePath, file } = rewriteFileModel;
        let fullPath;
        if (rewritePath) {
            fullPath = this.generator.destinationPath(rewritePath, file);
        }
        else {
            fullPath = this.generator.destinationPath(file);
        }
        this.generator.editFile(fullPath, { ignoreNonExisting }, createNeedleCallback({
            needle: rewriteFileModel.needle,
            contentToAdd: rewriteFileModel.splicable,
            contentToCheck: rewriteFileModel.regexp,
            ignoreWhitespaces: rewriteFileModel.prettierAware,
            autoIndent: false,
        }));
    }
    editFile(fullPath, errorMessage, needleData) {
        const ignoreNonExisting = errorMessage ?? true;
        this.generator.editFile(fullPath, { ignoreNonExisting }, createNeedleCallback(needleData));
    }
    logNeedleNotFound(exception, message, fullPath) {
        if (!message) {
            message = 'File rewrite failed.';
        }
        this.generator.log(chalk.yellow('\nUnable to find ') + fullPath + chalk.yellow(` or missing required jhipster-needle. ${message}\n`));
        this.generator.log.debug('Error:', exception);
    }
    /**
     * @deprecated
     */
    generateFileModelWithPath(aPath, aFile, needleTag, ...content) {
        return Object.assign(this.generateFileModel(aFile, needleTag, ...content), { path: aPath });
    }
    /**
     * @deprecated
     */
    generateFileModel(aFile, needleTag, ...content) {
        return {
            file: aFile,
            needle: needleTag,
            splicable: content,
        };
    }
}

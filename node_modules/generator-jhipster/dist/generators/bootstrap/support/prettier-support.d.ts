import { Piscina } from 'piscina';
import type { Options as PrettierOptions } from 'prettier';
import type { MemFsEditorFile } from 'mem-fs-editor';
import type CoreGenerator from '../../base-core/index.js';
export declare const isPrettierConfigFilePath: (filePath: string) => boolean;
export declare const isPrettierConfigFile: (file: MemFsEditorFile) => boolean;
type PrettierWorkerOptions = {
    prettierPackageJson?: boolean;
    prettierJava?: boolean;
    prettierProperties?: boolean;
    prettierOptions?: PrettierOptions;
};
export declare class PrettierPool extends Piscina {
    constructor(options?: {});
    apply(data: PrettierWorkerOptions & {
        relativeFilePath: string;
        filePath: string;
        fileContents: string;
    }): Promise<{
        result?: string;
        errorMessage?: string;
    }>;
}
export declare const createPrettierTransform: (this: CoreGenerator, options?: PrettierWorkerOptions & {
    ignoreErrors?: boolean;
    extensions?: string;
    skipForks?: boolean;
}) => Promise<import("p-transform").DuplexWithDebug>;
export {};

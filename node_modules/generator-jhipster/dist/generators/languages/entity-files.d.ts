/**
 * The default is to use a file path string. It implies use of the template method.
 * For any other config an object { file:.., method:.., template:.. } can be used
 */
export declare const entityClientI18nFiles: {
    entityBaseFiles: {
        templates: {
            sourceFile: (context: any) => string;
            destinationFile: (context: any) => string;
        }[];
    }[];
};
export declare const userTranslationfiles: {
    userTranslationfiles: {
        from: (context: any) => string;
        to: (context: any) => string;
        transform: boolean;
        templates: string[];
    }[];
};
export declare const enumClientI18nFiles: {
    enumBaseFiles: {
        templates: {
            sourceFile: string;
            destinationFile: (context: any) => string;
        }[];
    }[];
};
export declare function writeEntityFiles(): {
    writeEnumFiles: (this: import("../index.js").GeneratorBaseCore, params: import("../../lib/types/application/tasks.js").TaskParamWithEntities<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>) => void;
    writeClientFiles: (this: import("../index.js").GeneratorBaseCore, params: import("../../lib/types/application/tasks.js").TaskParamWithEntities<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>, import("../../lib/types/application/application.js").ApplicationType<import("../base-application/index.js").Entity<import("../base-application/index.js").Field, never>>>) => void;
};

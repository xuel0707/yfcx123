/**
 * Copyright 2013-2024 the original author or authors from the JHipster project.
 *
 * This file is part of the JHipster project, see https://www.jhipster.tech/
 * for more information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export declare const escapeHtmlTranslationValue: (translation: string) => string;
export declare const escapeTsTranslationValue: (translation: string) => string;
export type TranslationReplaceOptions = {
    keyPattern?: string;
    interpolatePattern?: string;
    /** Wrap the replacement inside wrapTranslation chars */
    wrapTranslation?: string | string[];
    /** Escape specific chars for html */
    escapeHtml?: boolean;
    /** Apply JSON.stringify to the replacement */
    stringify?: boolean;
};
export declare const replaceTranslationKeysWithText: (getWebappTranslation: any, body: string, regexp: string, { keyPattern, interpolatePattern, wrapTranslation, escapeHtml, stringify }?: TranslationReplaceOptions) => string;
export declare const createJhiTransformTranslateReplacer: (getWebappTranslation: any, translateOptions?: TranslationReplaceOptions) => (body: string) => string;
export declare const createJhiTransformTranslateStringifyReplacer: (getWebappTranslation: any) => (body: string) => string;
export type JHITranslateConverterOptions = {
    filePath: string;
    /** Translation type */
    type: string;
    /** Translation key */
    key: string;
    /** Translation interpolation data */
    interpolate: string;
    /** Parse translation interpolation data */
    parsedInterpolate: Record<string, string> | undefined;
    /** Closing tag before the matched string */
    prefix: string;
    /** Opening tag after the matched string */
    suffix: string;
};
export type JHITranslateConverter = (opts: JHITranslateConverterOptions) => string;
export declare const replaceTranslateContents: (body: string, filePath: string, regexp: string, converter: JHITranslateConverter) => string;
export type JHITranslateReplacerOptions = {
    /** Allows a before part to be included in replacement */
    prefixPattern?: string;
    /** Allows an after part to be included in replacement */
    suffixPattern?: string;
};
export declare const createJhiTranslateReplacer: (converter: JHITranslateConverter, { prefixPattern, suffixPattern }?: JHITranslateReplacerOptions) => (body: string, filePath: string) => string;

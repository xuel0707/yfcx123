export declare const createTranslationsFilter: ({ clientSrcDir, nativeLanguage, fallbackLanguage }: {
    clientSrcDir: any;
    nativeLanguage: any;
    fallbackLanguage: any;
}) => (filePath: any) => boolean;
export declare const createTranslationsFileFilter: (opts: any) => (file: any) => boolean;
export default class TranslationData {
    translations: any;
    generator: any;
    constructor({ generator, translations }: {
        generator: any;
        translations: any;
    });
    loadFromStreamTransform({ enableTranslation, clientSrcDir, nativeLanguage, fallbackLanguage }: {
        enableTranslation: any;
        clientSrcDir: any;
        nativeLanguage: any;
        fallbackLanguage?: string | undefined;
    }): import("stream").Transform;
    mergeTranslation(translation: any, fallback: any): void;
    /**
     * Get translation value for a key.
     *
     * @param translationKey {string} - key to be translated
     * @param [data] {object} - template data in case translated value is a template
     */
    getClientTranslation(translationKey: any, data: any): any;
}

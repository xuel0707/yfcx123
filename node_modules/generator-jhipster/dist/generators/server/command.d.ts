declare const command: {
    readonly options: {
        readonly db: {
            readonly description: "Provide DB name for the application when skipping server side generation";
            readonly type: StringConstructor;
            readonly scope: "none";
        };
        readonly skipUserManagement: {
            readonly description: "Skip the user management module during app generation";
            readonly type: BooleanConstructor;
            readonly scope: "storage";
        };
        readonly recreateInitialChangelog: {
            readonly description: "Recreate the initial database changelog based on the current config";
            readonly type: BooleanConstructor;
            readonly scope: "none";
        };
        readonly cacheProvider: {
            readonly description: "Cache provider";
            readonly type: StringConstructor;
            readonly scope: "storage";
        };
        readonly enableSwaggerCodegen: {
            readonly description: "API first development using OpenAPI-generator";
            readonly type: BooleanConstructor;
            readonly scope: "storage";
        };
        readonly enableHibernateCache: {
            readonly description: "Enable hibernate cache";
            readonly type: BooleanConstructor;
            readonly scope: "storage";
        };
        readonly searchEngine: {
            readonly description: "Provide search engine for the application when skipping server side generation";
            readonly type: StringConstructor;
            readonly scope: "storage";
        };
        readonly skipCheckLengthOfIdentifier: {
            readonly description: "Skip check the length of the identifier, only for recent Oracle databases that support 30+ characters metadata";
            readonly type: BooleanConstructor;
            readonly scope: "storage";
        };
        readonly skipDbChangelog: {
            readonly description: "Skip the generation of database migrations";
            readonly type: BooleanConstructor;
            readonly scope: "none";
        };
        readonly skipFakeData: {
            readonly description: "Skip generation of fake data for development";
            readonly type: BooleanConstructor;
            readonly scope: "storage";
        };
        readonly websocket: {
            readonly description: "Provide websocket option for the application when skipping server side generation";
            readonly type: StringConstructor;
            readonly scope: "storage";
        };
        readonly projectVersion: {
            readonly description: "project version to use, this option is not persisted";
            readonly type: StringConstructor;
            readonly env: "JHI_PROJECT_VERSION";
            readonly scope: "generator";
        };
        readonly jhipsterDependenciesVersion: {
            readonly description: "jhipster-dependencies version to use, this option is not persisted";
            readonly type: StringConstructor;
            readonly env: "JHIPSTER_DEPENDENCIES_VERSION";
            readonly scope: "generator";
        };
    };
    readonly configs: {
        readonly applicationType: {
            readonly description: "Application type to generate";
            readonly cli: {
                readonly type: StringConstructor;
            };
            readonly prompt: {
                readonly type: "list";
                readonly message: `Which ${string} of application would you like to create?`;
            };
            readonly choices: readonly [{
                readonly value: "monolith";
                readonly name: "Monolithic application (recommended for simple projects)";
            }, {
                readonly value: "gateway";
                readonly name: "Gateway application";
            }, {
                readonly value: "microservice";
                readonly name: "Microservice application";
            }];
            readonly scope: "storage";
        };
    };
    readonly import: readonly ["common", "spring-boot"];
};
export default command;

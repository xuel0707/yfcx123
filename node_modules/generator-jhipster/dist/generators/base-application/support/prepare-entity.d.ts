import type BaseGenerator from '../../base-core/index.js';
import type { Entity } from '../../../lib/types/application/index.js';
import type CoreGenerator from '../../base-core/generator.js';
export declare const entityDefaultConfig: {
    pagination: any;
    anyPropertyHasValidation: boolean;
    dto: any;
    service: any;
    jpaMetamodelFiltering: boolean;
    readOnly: boolean;
    embedded: boolean;
    entityAngularJSSuffix: string;
    fluentMethods: boolean;
    clientRootFolder: string;
    readonly fields: never[];
    readonly relationships: never[];
};
export default function prepareEntity(entityWithConfig: any, generator: any, application: any): any;
export declare function derivedPrimaryKeyProperties(primaryKey: any): void;
export declare function prepareEntityPrimaryKeyForTemplates(this: CoreGenerator | void, { entity: entityWithConfig, enableCompositeId, application }: {
    entity: any;
    enableCompositeId?: boolean;
    application?: any;
}): any;
/**
 * Copy required application config into entity.
 * Some entity features are related to the backend instead of the current app.
 * This allows to entities files based on the backend features.
 *
 * @param {Object} entity - entity to copy the config into.
 * @param {Object} config - config object.
 * @returns {Object} the entity parameter for chaining.
 */
export declare function loadRequiredConfigIntoEntity(this: BaseGenerator | void, entity: any, config: any): any;
export declare function preparePostEntityCommonDerivedProperties(entity: Entity): void;
export declare function preparePostEntitiesCommonDerivedProperties(entities: any): void;
export declare function addFakerToEntity(entityWithConfig: any, nativeLanguage?: string): Promise<void>;

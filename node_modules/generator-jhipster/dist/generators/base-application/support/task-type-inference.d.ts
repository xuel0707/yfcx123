import type { ApplicationType } from '../../../lib/types/application/application.js';
import type { TaskTypes } from '../../../lib/types/application/tasks.js';
import type CoreGenerator from '../../base-core/generator.js';
import type { WriteFileBlock, WriteFileSection } from '../../base/api.js';
import type { Entity } from '../../../lib/types/application/entity.js';
export declare function asWriteFilesSection<Data = ApplicationType<Entity>>(section: WriteFileSection<Data>): WriteFileSection<Data>;
export declare function asWriteFilesBlock<Data = ApplicationType<Entity>>(section: WriteFileBlock<Data>): WriteFileBlock<Data>;
export declare function asInitializingTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['InitializingTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["InitializingTaskParam"]) => void;
export declare function asPromptingTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['PromptingTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["PromptingTaskParam"]) => void;
export declare function asConfiguringTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['ConfiguringTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["ConfiguringTaskParam"]) => void;
export declare function asComposingTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['ComposingTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["ComposingTaskParam"]) => void;
export declare function asLoadingTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['LoadingTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["LoadingTaskParam"]) => void;
export declare function asPreparingTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['PreparingTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["PreparingTaskParam"]) => void;
export declare function asPostPreparingTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['PostPreparingTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["PostPreparingTaskParam"]) => void;
export declare function asPreparingEachEntityTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['PreparingEachEntityTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["PreparingEachEntityTaskParam"]) => void;
export declare function asPreparingEachEntityFieldTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['PreparingEachEntityFieldTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["PreparingEachEntityFieldTaskParam"]) => void;
export declare function asPreparingEachEntityRelationshipTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['PreparingEachEntityRelationshipTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["PreparingEachEntityRelationshipTaskParam"]) => void;
export declare function asPostPreparingEachEntityTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['PostPreparingEachEntityTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["PostPreparingEachEntityTaskParam"]) => void;
export declare function asDefaultTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['DefaultTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["DefaultTaskParam"]) => void;
export declare function asWritingTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['WritingTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["WritingTaskParam"]) => void;
export declare function asWritingEntitiesTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['WritingEntitiesTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["WritingEntitiesTaskParam"]) => void;
export declare function asPostWritingTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['PostWritingTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["PostWritingTaskParam"]) => void;
export declare function asPostWritingEntitiesTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['PostWritingEntitiesTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["PostWritingEntitiesTaskParam"]) => void;
export declare function asInstallTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['InstallTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["InstallTaskParam"]) => void;
export declare function asEndTask<E = Entity, A = ApplicationType<E>>(task: (this: CoreGenerator, params: TaskTypes<E, A>['EndTaskParam']) => void): (this: CoreGenerator, params: TaskTypes<E, A>["EndTaskParam"]) => void;

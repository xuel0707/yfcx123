import BaseApplicationGenerator from '../../../base-application/index.js';
export default class BootstrapGenerator extends BaseApplicationGenerator {
    packageInfoFile: boolean;
    beforeQueue(): Promise<void>;
    get initializing(): import("../../../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../../../lib/types/base/tasks.js").TaskParamWithControl, "validateJava">;
    get configuring(): import("../../../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../../../lib/types/base/tasks.js").TaskParamWithControl, "checkConfig">;
    get preparing(): import("../../../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../../../lib/types/application/tasks.js").PreparingTaskParam<import("../../../base-application/index.js").Entity<import("../../../base-application/index.js").Field, never>, import("../../../../lib/types/application/application.js").ApplicationType<import("../../../base-application/index.js").Entity<import("../../../base-application/index.js").Field, never>>>, "imperativeOrReactive" | "applicationDefaults" | "prepareJavaApplication" | "needles">;
    get default(): import("../../../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../../../lib/types/application/tasks.js").TaskParamWithEntities<import("../../../base-application/index.js").Entity<import("../../../base-application/index.js").Field, never>, import("../../../../lib/types/application/application.js").ApplicationType<import("../../../base-application/index.js").Entity<import("../../../base-application/index.js").Field, never>>>, "loadDomains" | "generatedAnnotation" | "generatedPackageInfo">;
    get writing(): import("../../../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../../../lib/types/application/tasks.js").WritingTaskParam<import("../../../base-application/index.js").Entity<import("../../../base-application/index.js").Field, never>, import("../../../../lib/types/application/application.js").ApplicationType<import("../../../base-application/index.js").Entity<import("../../../base-application/index.js").Field, never>>>, "writing">;
    get postWriting(): import("../../../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../../../lib/types/application/tasks.js").PostWritingTaskParam<import("../../../base-application/index.js").Entity<import("../../../base-application/index.js").Field, never>, import("../../../../lib/types/application/application.js").ApplicationType<import("../../../base-application/index.js").Entity<import("../../../base-application/index.js").Field, never>>>, "addPrettierJava">;
    /**
     * Check if a supported Java is installed
     *
     * Blueprints can customize or disable java checks versions by overriding this method.
     * @example
     * // disable checks
     * checkJava() {}
     * @examples
     * // enforce java lts versions
     * checkJava() {
     *   super.checkJava(['8', '11', '17'], { throwOnError: true });
     * }
     */
    checkJava(javaCompatibleVersions?: string[], checkResultValidation?: any): void;
}

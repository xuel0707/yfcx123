/**
 * Copyright 2013-2024 the original author or authors from the JHipster project.
 *
 * This file is part of the JHipster project, see https://www.jhipster.tech/
 * for more information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { escapeRegExp } from 'lodash-es';
const addJavaImportToContent = (content, identifier, { staticImport } = {}) => {
    const importStatement = `import ${staticImport ? 'static ' : ''}${identifier};`;
    return new RegExp(escapeRegExp(importStatement)).test(content)
        ? content
        : content.replace(/(package [\w.]+;\n\n?)/, `$1${importStatement}\n`);
};
export function addJavaImport(contentOrIdentifier, identifierOrType, type) {
    if (typeof identifierOrType === 'string') {
        return addJavaImportToContent(contentOrIdentifier, identifierOrType, type);
    }
    return (content) => addJavaImportToContent(content, contentOrIdentifier, identifierOrType);
}
const addJavaAnnotationToContent = (content, annotationDef) => {
    const { package: packageName, annotation, parameters } = annotationDef;
    if (packageName) {
        content = addJavaImport(content, `${packageName}.${annotation}`);
    }
    const annotationToAdd = parameters ? `${annotation}(${parameters()})` : annotation;
    if (!new RegExp(escapeRegExp(`\n@${annotationToAdd}\n`)).test(content)) {
        if (new RegExp(escapeRegExp(`\n@${annotation}(`)).test(content)) {
            throw new Error(`Annotation already exists: ${annotation} replace is not implemented yet.`);
        }
        // add the annotation before class or interface
        content = content.replace(/\n([a-w ]*(class|@?interface|enum) )/, `\n@${annotationToAdd}\n$1`);
    }
    return content;
};
export function addJavaAnnotation(contentOrAnnotation, annotation) {
    if (typeof contentOrAnnotation === 'string') {
        return addJavaAnnotationToContent(contentOrAnnotation, annotation);
    }
    return (content) => addJavaAnnotationToContent(content, contentOrAnnotation);
}

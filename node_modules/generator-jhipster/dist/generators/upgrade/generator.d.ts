import BaseGenerator from '../base/index.js';
export default class UpgradeGenerator extends BaseGenerator {
    requiredPackage: string;
    createEnvBuilder: any;
    actualApplicationBranch: any;
    silent: any;
    applyConfig: any;
    spawnStdio: 'inherit' | 'ignore' | 'pipe' | 'overlapped';
    executable: any;
    verbose: boolean;
    beforeQueue(): Promise<void>;
    get initializing(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/base/tasks.js").TaskParamWithControl, "displayLogo" | "initializeOptions" | "assertJHipsterProject" | "checkoutDependency" | "assertGitPresent" | "assertGitRepository" | "assertNoLocalChanges" | "detectCurrentBranch">;
    get default(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/base/tasks.js").TaskParamWithControl, "prepareUpgradeBranch" | "prepareSourceBranch" | "updateUpgradeBranch" | "upgradeSourceBranch">;
    get end(): import("../../lib/types/base/tasks.js").GenericTaskGroup<any, import("../../lib/types/base/tasks.js").TaskParamWithControl, "end">;
    rmRf(file: any): Promise<void>;
    /**
     * Remove every generated file not related to the generation.
     */
    cleanUp(): Promise<void>;
    getPackageJsonVersion(): any;
    isV7(version: any): any;
    runNonInteractive(inherit?: boolean): Promise<void>;
    /**
     * Check git version.
     */
    checkGitVersion(minVersion: any): Promise<any>;
}

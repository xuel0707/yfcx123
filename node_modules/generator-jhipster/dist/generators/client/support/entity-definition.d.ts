/**
 * Copyright 2013-2024 the original author or authors from the JHipster project.
 *
 * This file is part of the JHipster project, see https://www.jhipster.tech/
 * for more information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @private
 * Generate Entity Client Field Declarations
 *
 * @param {string} primaryKey - primary key definition
 * @param {Array|Object} fields - array of fields
 * @param {Array|Object} relationships - array of relationships
 * @param {string} dto - dto
 * @param [customDateType]
 * @param {boolean} embedded - either the actual entity is embedded or not
 * @param { string} clientFramework
 * @returns variablesWithTypes: Array
 */
declare const generateEntityClientFields: (primaryKey: any, fields: any, relationships: any, dto: any, customDateType?: string, embedded?: boolean, clientFramework?: string) => never[];
/**
 * @private
 * Generate a test entity, according to the type
 *
 * @param references
 * @param {number} [index] - index of the primary key sample, pass undefined for a random key.
 */
export declare const generateTestEntity: (references: any, index?: string) => {
    [k: string]: any;
};
export default generateEntityClientFields;

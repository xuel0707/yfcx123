import { fieldTypes } from '../../../lib/jhipster/index.js';
import { fieldIsEnum } from '../../base-application/support/index.js';
const { BOOLEAN: TYPE_BOOLEAN, ZONED_DATE_TIME: TYPE_ZONED_DATE_TIME, INSTANT: TYPE_INSTANT, LOCAL_DATE: TYPE_LOCAL_DATE, INTEGER: TYPE_INTEGER, LONG: TYPE_LONG, BIG_DECIMAL: TYPE_BIG_DECIMAL, FLOAT: TYPE_FLOAT, DOUBLE: TYPE_DOUBLE, } = fieldTypes.CommonDBTypes;
/**
 * return the input if it's a type, otherwise returns the type attribute of the input
 * @param key
 * @returns {*}
 */
export const getEntryIfTypeOrTypeAttribute = (key) => {
    if (typeof key === 'object') {
        return key.type;
    }
    return key;
};
/**
 * @private
 * Find key type for Typescript
 *
 * @param {string | object} primaryKey - primary key definition
 * @returns {string} primary key type in Typescript
 */
const getTypescriptKeyType = (primaryKey) => {
    if ([TYPE_INTEGER, TYPE_LONG, TYPE_FLOAT, TYPE_DOUBLE, TYPE_BIG_DECIMAL].includes(getEntryIfTypeOrTypeAttribute(primaryKey))) {
        return 'number';
    }
    return 'string';
};
/**
 * @private
 * Find type for Typescript
 *
 * @param {string} fieldType - field type
 * @returns {string} field type in Typescript
 */
export const getTypescriptType = fieldType => {
    if ([TYPE_INTEGER, TYPE_LONG, TYPE_FLOAT, TYPE_DOUBLE, TYPE_BIG_DECIMAL].includes(fieldType)) {
        return 'number';
    }
    if ([TYPE_LOCAL_DATE, TYPE_ZONED_DATE_TIME, TYPE_INSTANT].includes(fieldType)) {
        return 'dayjs.Dayjs';
    }
    if ([TYPE_BOOLEAN].includes(fieldType)) {
        return 'boolean';
    }
    if (fieldIsEnum(fieldType)) {
        return fieldType;
    }
    return 'string';
};
export default getTypescriptKeyType;

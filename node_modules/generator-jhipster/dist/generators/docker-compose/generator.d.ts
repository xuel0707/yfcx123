import BaseWorkspacesGenerator from '../base-workspaces/index.js';
/**
 * @class
 * @extends {import('../base/index.js')}
 */
export default class DockerComposeGenerator extends BaseWorkspacesGenerator {
    existingDeployment: any;
    beforeQueue(): Promise<void>;
    get initializing(): {
        sayHello(): void;
        checkDocker: (this: import("../index.js").GeneratorBaseCore) => Promise<void>;
        checkDockerCompose(): Promise<void>;
    };
    get loading(): {
        loadWorkspacesConfig(): void;
    };
    get promptingWorkspaces(): {
        askForMonitoring({ workspaces }: {
            workspaces: any;
        }): Promise<void>;
        askForClustersMode({ workspaces, applications }: {
            workspaces: any;
            applications: any;
        }): Promise<void>;
        askForServiceDiscovery({ workspaces, applications }: {
            workspaces: any;
            applications: any;
        }): Promise<void>;
    };
    get configuringWorkspaces(): {
        configureBaseDeployment({ applications }: {
            applications: any;
        }): void;
    };
    get loadingWorkspaces(): {
        loadBaseDeployment({ deployment }: {
            deployment: any;
        }): void;
        loadPlatformConfig({ deployment }: {
            deployment: any;
        }): void;
    };
    get preparingWorkspaces(): {
        prepareDeployment({ deployment, applications }: {
            deployment: any;
            applications: any;
        }): void;
    };
    get default(): {
        setAppsYaml({ workspaces, deployment, applications }: {
            workspaces: any;
            deployment: any;
            applications: any;
        }): Promise<void>;
    };
    get writing(): {
        cleanup(): void;
        writeDockerCompose({ deployment }: {
            deployment: any;
        }): void;
        writeRegistryFiles({ deployment }: {
            deployment: any;
        }): void;
        writeKeycloakFiles({ deployment }: {
            deployment: any;
        }): void;
        writePrometheusFiles({ deployment }: {
            deployment: any;
        }): void;
    };
    get end(): {
        end({ workspaces, applications }: {
            workspaces: any;
            applications: any;
        }): void;
    };
    checkApplicationsDockerImages({ workspaces, applications }: {
        workspaces: any;
        applications: any;
    }): void;
    get deploymentConfigWithDefaults(): any;
    loadDeploymentConfig({ deployment }: {
        deployment: any;
    }): void;
    prepareDeploymentDerivedProperties({ deployment, applications }: {
        deployment: any;
        applications: any;
    }): void;
    askForMonitoring(): Promise<void>;
    askForClustersMode({ applications }: {
        applications: any;
    }): Promise<void>;
    askForServiceDiscovery({ applications }: {
        applications: any;
    }): Promise<void>;
}

import type { Logger as LoggerApi } from '@yeoman/types';
import type { Logger as DefaultLogger, LoggerOptions } from '@yeoman/adapter';
export declare const CLI_LOGGER = "jhipster:cli";
export declare const createJHipsterLogger: (options?: LoggerOptions & {
    namespace?: string;
    debugEnabled?: boolean;
}) => {
    skip: (format?: any, ...param: any[]) => LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
    force: (format?: any, ...param: any[]) => LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
    create: (format?: any, ...param: any[]) => LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
    invoke: (format?: any, ...param: any[]) => LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
    conflict: (format?: any, ...param: any[]) => LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
    identical: (format?: any, ...param: any[]) => LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
    info: (format?: any, ...param: any[]) => LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
    added: (format?: any, ...param: any[]) => LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
    removed: (format?: any, ...param: any[]) => LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
} & {
    (format?: string, parameters?: Record<string, any>): LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
    (message?: any, ...optionalParameters: any[]): LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
    write(format?: any, ...param: any[]): LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
    writeln(format?: any, ...param: any[]): LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
    ok(format?: any, ...param: any[]): LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
    error(format?: any, ...param: any[]): LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
    colored(coloredMessage: import("@yeoman/types").ColoredMessage<import("@yeoman/types").DefaultLoggerCategories>[]): LoggerApi<import("@yeoman/types").DefaultLoggerCategories>;
} & {
    debugger: any;
    debug(msg: any, ...args: any[]): void;
    warn(this: LoggerApi, format?: any, ...param: any[]): LoggerApi;
    verboseInfo(this: LoggerApi, format?: any, ...param: any[]): LoggerApi;
    log(this: LoggerApi, format?: any, ...param: any[]): LoggerApi;
    error(this: DefaultLogger, msg: any, error: any): void;
    fatal(this: any, msg: any, trace: any): never;
} & {
    console: Console;
};
export type Logger = ReturnType<typeof createJHipsterLogger>;

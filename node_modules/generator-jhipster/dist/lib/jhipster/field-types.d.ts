/**
 * Copyright 2013-2024 the original author or authors from the JHipster project.
 *
 * This file is part of the JHipster project, see https://www.jhipster.tech/
 * for more information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export declare const CommonDBTypes: {
    STRING: string;
    INTEGER: string;
    LONG: string;
    BIG_DECIMAL: string;
    FLOAT: string;
    DOUBLE: string;
    UUID: string;
    ENUM: string;
    BOOLEAN: string;
    LOCAL_DATE: string;
    ZONED_DATE_TIME: string;
    BLOB: string;
    ANY_BLOB: string;
    IMAGE_BLOB: string;
    TEXT_BLOB: string;
    INSTANT: string;
    DURATION: string;
    BYTES: string;
    BYTE_BUFFER: string;
};
export declare const RelationalOnlyDBTypes: {
    BYTES: string;
    BYTE_BUFFER: string;
};
export declare const BlobTypes: {
    readonly IMAGE: "image";
    readonly ANY: "any";
    readonly TEXT: "text";
};
declare const _default: {
    CommonDBTypes: {
        STRING: string;
        INTEGER: string;
        LONG: string;
        BIG_DECIMAL: string;
        FLOAT: string;
        DOUBLE: string;
        UUID: string;
        ENUM: string;
        BOOLEAN: string;
        LOCAL_DATE: string;
        ZONED_DATE_TIME: string;
        BLOB: string;
        ANY_BLOB: string;
        IMAGE_BLOB: string;
        TEXT_BLOB: string;
        INSTANT: string;
        DURATION: string;
        BYTES: string;
        BYTE_BUFFER: string;
    };
    RelationalOnlyDBTypes: {
        BYTES: string;
        BYTE_BUFFER: string;
    };
    isCommonDBType: typeof isCommonDBType;
    hasValidation: typeof hasValidation;
    getIsType: typeof getIsType;
    BlobTypes: {
        readonly IMAGE: "image";
        readonly ANY: "any";
        readonly TEXT: "text";
    };
};
export default _default;
export declare function isCommonDBType(type: any): boolean;
export declare function hasValidation(type: any, validation: any, isAnEnum?: boolean): boolean;
export declare function getIsType(databaseType?: string, callback?: any): (type: any) => boolean;

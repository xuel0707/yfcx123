export const extractArgumentsFromConfigs = (configs) => {
    if (!configs)
        return {};
    return Object.fromEntries(Object.entries(configs)
        .filter(([_name, def]) => def.argument)
        .map(([name, def]) => [
        name,
        {
            description: def.description,
            scope: def.scope,
            ...def.argument,
        },
    ]));
};
export const extractJdlDefinitionFromCommandConfig = (configs = {}) => Object.entries(configs)
    .filter(([_name, def]) => def.jdl)
    .map(([name, def]) => ({
    ...def.jdl,
    name,
    knownChoices: def.choices?.map(choice => (typeof choice === 'string' ? choice : choice.value)),
}))
    .sort((a, b) => (b.name.startsWith(a.name) ? 1 : a.name.localeCompare(b.name)));
export const convertConfigToOption = (name, config) => {
    if (!config?.cli?.type)
        return undefined;
    const choices = config.choices?.map(choice => (typeof choice === 'string' ? choice : choice.value));
    return {
        name,
        description: config.description,
        choices,
        scope: config.scope ?? 'storage',
        ...config.cli,
    };
};

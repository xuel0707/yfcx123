export declare const entitySimple: {
    name: string;
    changelogDate: string;
    jpaMetamodelFiltering: boolean;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
};
export declare const entityAnotherSimple: {
    name: string;
    changelogDate: string;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
    dto: string;
    service: string;
    pagination: string;
    clientRootFolder: string;
};
export declare const entitiesSimple: ({
    name: string;
    changelogDate: string;
    jpaMetamodelFiltering: boolean;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
} | {
    name: string;
    changelogDate: string;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
    dto: string;
    service: string;
    pagination: string;
    clientRootFolder: string;
})[];
export declare const entitiesWithRelationships: ({
    name: string;
    changelogDate: string;
    jpaMetamodelFiltering: boolean;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
} | {
    name: string;
    changelogDate: string;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
    dto: string;
    service: string;
    pagination: string;
    clientRootFolder: string;
} | {
    name: string;
    changelogDate: string;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
    relationships: {
        relationshipName: string;
        otherEntityName: string;
        relationshipType: string;
    }[];
})[];
export declare const entityCustomId: {
    name: string;
    changelogDate: string;
    entityPackage: string;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
};
export declare const entitiesMicroservice: {
    name: string;
    skipFakeData: boolean;
    changelogDate: string;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
    microserviceName: string;
    service: string;
    pagination: string;
};
export declare const entitySkipClient: {
    name: string;
    changelogDate: string;
    skipClient: boolean;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
};
export declare const entitiesServerSamples: ({
    name: string;
    changelogDate: string;
    jpaMetamodelFiltering: boolean;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
} | {
    name: string;
    changelogDate: string;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
    dto: string;
    service: string;
    pagination: string;
    clientRootFolder: string;
} | {
    name: string;
    changelogDate: string;
    entityPackage: string;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
} | {
    name: string;
    skipFakeData: boolean;
    changelogDate: string;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
    microserviceName: string;
    service: string;
    pagination: string;
})[];
export declare const entitiesClientSamples: ({
    name: string;
    changelogDate: string;
    jpaMetamodelFiltering: boolean;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
} | {
    name: string;
    changelogDate: string;
    entityPackage: string;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
} | {
    name: string;
    skipFakeData: boolean;
    changelogDate: string;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
    microserviceName: string;
    service: string;
    pagination: string;
} | {
    name: string;
    changelogDate: string;
    skipClient: boolean;
    fields: {
        fieldName: string;
        fieldType: string;
    }[];
})[];

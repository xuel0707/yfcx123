/**
 * Copyright 2013-2024 the original author or authors from the JHipster project.
 *
 * This file is part of the JHipster project, see https://www.jhipster.tech/
 * for more information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import type { JDLRuntime } from '../types/runtime.js';
import type JDLApplicationConfigurationOption from './jdl-application-configuration-option.js';
import type JDLApplicationConfiguration from './jdl-application-configuration.js';
import JDLApplicationEntities from './jdl-application-entities.js';
import JDLOptions from './jdl-options.js';
import type AbstractJDLOption from './abstract-jdl-option.js';
export default class JDLApplication {
    config: JDLApplicationConfiguration;
    namespaceConfigs: JDLApplicationConfiguration[];
    entityNames: JDLApplicationEntities;
    options: JDLOptions;
    constructor({ config, entityNames, namespaceConfigs }: any, runtime: JDLRuntime);
    setConfigurationOption(option: JDLApplicationConfigurationOption<any>): void;
    hasConfigurationOption(optionName: string): boolean;
    getConfigurationOptionValue(optionName: string): any;
    forEachConfigurationOption(passedFunction: (option: JDLApplicationConfigurationOption<any>) => void): void;
    forEachNamespaceConfiguration(passedFunction: (option: JDLApplicationConfiguration) => void): void;
    addEntityName(entityName: string): void;
    addEntityNames(entityNames?: string[]): void;
    getEntityNames(): string[];
    hasEntityName(entityName: string): boolean;
    forEachEntityName(passedFunction: any): void;
    addOption(jdlOption: AbstractJDLOption | undefined): void;
    forEachOption(passedFunction: (option: AbstractJDLOption) => void): void;
    getOptionQuantity(): number;
    toString(): string;
}

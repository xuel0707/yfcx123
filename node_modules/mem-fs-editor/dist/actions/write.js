import assert from 'assert';
import { resolve } from 'path';
import { isFileStateModified, setModifiedFileState } from '../state.js';
import File from 'vinyl';
export const isMemFsEditorFileEqual = (a, b) => {
    if (a.stat?.mode !== b.stat?.mode) {
        return false;
    }
    return a.contents === b.contents || a.contents?.equals(b.contents);
};
export function _write(file) {
    if (this.store.existsInMemory(file.path)) {
        // Backward compatibility, keep behavior for existing files, custom properties may have been added
        const existingFile = this.store.get(file.path);
        if (!isFileStateModified(existingFile) || !isMemFsEditorFileEqual(existingFile, file)) {
            const { contents, stat } = file;
            setModifiedFileState(existingFile);
            Object.assign(existingFile, { contents, stat: stat ?? existingFile.stat });
            this.store.add(existingFile);
        }
    }
    else {
        setModifiedFileState(file);
        this.store.add(file);
    }
}
export default function write(filepath, contents, stat = null) {
    assert(typeof contents === 'string' || Buffer.isBuffer(contents), 'Expected `contents` to be a String or a Buffer');
    const newContents = Buffer.isBuffer(contents) ? contents : Buffer.from(contents);
    this._write(new File({
        path: resolve(filepath),
        contents: newContents,
        stat: stat,
    }));
    return contents.toString();
}
